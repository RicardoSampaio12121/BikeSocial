// <auto-generated />
using System;
using BikeSocialDAL.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BikeSocialDAL.Migrations
{
    [DbContext(typeof(DataContext.DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BikeSocialEntities.Achievements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AchievementTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("AchievementTypesId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlacesId")
                        .HasColumnType("int");

                    b.Property<float>("achievementTime")
                        .HasColumnType("real");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AchievementTypesId");

                    b.HasIndex("PlacesId");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("BikeSocialEntities.AchievementTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AchievementTypes");
                });

            modelBuilder.Entity("BikeSocialEntities.AthleteParents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsersId");

                    b.ToTable("AthleteParents");
                });

            modelBuilder.Entity("BikeSocialEntities.Athletes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AthleteParentsId")
                        .HasColumnType("int");

                    b.Property<int>("AthleteTypesId")
                        .HasColumnType("int");

                    b.Property<int>("FederationsId")
                        .HasColumnType("int");

                    b.Property<int?>("PrizesId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamsId")
                        .HasColumnType("int");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AthleteParentsId");

                    b.HasIndex("AthleteTypesId");

                    b.HasIndex("FederationsId");

                    b.HasIndex("PrizesId");

                    b.HasIndex("TeamsId");

                    b.HasIndex("UsersId");

                    b.ToTable("Athletes");
                });

            modelBuilder.Entity("BikeSocialEntities.AthleteTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AthleteTypes");
                });

            modelBuilder.Entity("BikeSocialEntities.Clubs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlacesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlacesId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("BikeSocialEntities.Coaches", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamsId");

                    b.HasIndex("UsersId");

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("BikeSocialEntities.Directors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClubsId")
                        .HasColumnType("int");

                    b.Property<int>("DirectorTypesId")
                        .HasColumnType("int");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClubsId");

                    b.HasIndex("DirectorTypesId");

                    b.HasIndex("UsersId");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("BikeSocialEntities.DirectorTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DirectorTypes");
                });

            modelBuilder.Entity("BikeSocialEntities.Federations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Federations");
                });

            modelBuilder.Entity("BikeSocialEntities.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("recieptientId")
                        .HasColumnType("int");

                    b.Property<int?>("solicitorId")
                        .HasColumnType("int");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("timeSent")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("recieptientId");

                    b.HasIndex("solicitorId");

                    b.ToTable("Friend");
                });

            modelBuilder.Entity("BikeSocialEntities.Places", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("BikeSocialEntities.Prizes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Prizes");
                });

            modelBuilder.Entity("BikeSocialEntities.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UsersId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("BikeSocialEntities.RaceInvites", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AthletesId")
                        .HasColumnType("int");

                    b.Property<bool>("Confirmation")
                        .HasColumnType("bit");

                    b.Property<int?>("RacesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AthletesId");

                    b.HasIndex("RacesId");

                    b.ToTable("RaceInvites");
                });

            modelBuilder.Entity("BikeSocialEntities.RaceResults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AthletesId")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int?>("RacesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AthletesId");

                    b.HasIndex("RacesId");

                    b.ToTable("RaceResults");
                });

            modelBuilder.Entity("BikeSocialEntities.Races", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FederationsId")
                        .HasColumnType("int");

                    b.Property<int>("PlacesId")
                        .HasColumnType("int");

                    b.Property<int>("RaceTypesId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("distance")
                        .HasColumnType("real");

                    b.Property<float>("estimateTime")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("FederationsId");

                    b.HasIndex("PlacesId");

                    b.HasIndex("RaceTypesId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("BikeSocialEntities.RaceTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RaceTypes");
                });

            modelBuilder.Entity("BikeSocialEntities.RouteInvites", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Confirmation")
                        .HasColumnType("bit");

                    b.Property<int>("RoutesId")
                        .HasColumnType("int");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoutesId");

                    b.HasIndex("UsersId");

                    b.ToTable("RouteInvites");
                });

            modelBuilder.Entity("BikeSocialEntities.Routes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<float>("EstimatedTime")
                        .HasColumnType("real");

                    b.Property<int>("PlacesId")
                        .HasColumnType("int");

                    b.Property<bool>("Public")
                        .HasColumnType("bit");

                    b.Property<int>("RouteTypesId")
                        .HasColumnType("int");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PlacesId");

                    b.HasIndex("RouteTypesId");

                    b.HasIndex("UsersId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("BikeSocialEntities.RouteTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RouteTypes");
                });

            modelBuilder.Entity("BikeSocialEntities.TeamInviteAthletes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AthletesId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AthletesId");

                    b.HasIndex("TeamsId");

                    b.ToTable("TeamInviteAthletes");
                });

            modelBuilder.Entity("BikeSocialEntities.TeamInviteCoaches", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CoachesId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoachesId");

                    b.HasIndex("TeamsId");

                    b.ToTable("TeamInviteCoaches");
                });

            modelBuilder.Entity("BikeSocialEntities.Teams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClubsId")
                        .HasColumnType("int");

                    b.Property<int?>("FederationsId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlacesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClubsId");

                    b.HasIndex("FederationsId");

                    b.HasIndex("PlacesId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("BikeSocialEntities.TrainingInvites", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AthletesId")
                        .HasColumnType("int");

                    b.Property<bool>("Confirmation")
                        .HasColumnType("bit");

                    b.Property<int?>("TrainingsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AthletesId");

                    b.HasIndex("TrainingsId");

                    b.ToTable("TrainingInvites");
                });

            modelBuilder.Entity("BikeSocialEntities.Trainings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<float>("EstimatedTime")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlacesId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamsId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingTypesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PlacesId");

                    b.HasIndex("TeamsId");

                    b.HasIndex("TrainingTypesId");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("BikeSocialEntities.TrainingTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TrainingTypes");
                });

            modelBuilder.Entity("BikeSocialEntities.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PlacesId")
                        .HasColumnType("int");

                    b.Property<int>("UserTypesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("birthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("contact")
                        .HasColumnType("int");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlacesId");

                    b.HasIndex("UserTypesId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BikeSocialEntities.UserTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("BikeSocialEntities.Achievements", b =>
                {
                    b.HasOne("BikeSocialEntities.AchievementTypes", null)
                        .WithMany("Achievements")
                        .HasForeignKey("AchievementTypesId");

                    b.HasOne("BikeSocialEntities.Places", null)
                        .WithMany("Achievements")
                        .HasForeignKey("PlacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BikeSocialEntities.AthleteParents", b =>
                {
                    b.HasOne("BikeSocialEntities.Users", null)
                        .WithMany("AthleteParents")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BikeSocialEntities.Athletes", b =>
                {
                    b.HasOne("BikeSocialEntities.AthleteParents", null)
                        .WithMany("Athletes")
                        .HasForeignKey("AthleteParentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeSocialEntities.AthleteTypes", null)
                        .WithMany("Athletes")
                        .HasForeignKey("AthleteTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeSocialEntities.Federations", null)
                        .WithMany("Athletes")
                        .HasForeignKey("FederationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeSocialEntities.Prizes", null)
                        .WithMany("Athletes")
                        .HasForeignKey("PrizesId");

                    b.HasOne("BikeSocialEntities.Teams", null)
                        .WithMany("Athletes")
                        .HasForeignKey("TeamsId");

                    b.HasOne("BikeSocialEntities.Users", null)
                        .WithMany("Athletes")
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("BikeSocialEntities.Clubs", b =>
                {
                    b.HasOne("BikeSocialEntities.Places", null)
                        .WithMany("Clubs")
                        .HasForeignKey("PlacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BikeSocialEntities.Coaches", b =>
                {
                    b.HasOne("BikeSocialEntities.Teams", null)
                        .WithMany("Coaches")
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeSocialEntities.Users", null)
                        .WithMany("Coaches")
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("BikeSocialEntities.Directors", b =>
                {
                    b.HasOne("BikeSocialEntities.Clubs", null)
                        .WithMany("Directors")
                        .HasForeignKey("ClubsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeSocialEntities.DirectorTypes", null)
                        .WithMany("Directors")
                        .HasForeignKey("DirectorTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeSocialEntities.Users", null)
                        .WithMany("Directors")
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("BikeSocialEntities.Friend", b =>
                {
                    b.HasOne("BikeSocialEntities.Users", "recieptient")
                        .WithMany("recieptient")
                        .HasForeignKey("recieptientId");

                    b.HasOne("BikeSocialEntities.Users", "solicitor")
                        .WithMany("solicitor")
                        .HasForeignKey("solicitorId");

                    b.Navigation("recieptient");

                    b.Navigation("solicitor");
                });

            modelBuilder.Entity("BikeSocialEntities.Profile", b =>
                {
                    b.HasOne("BikeSocialEntities.Users", null)
                        .WithMany("Profiles")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BikeSocialEntities.RaceInvites", b =>
                {
                    b.HasOne("BikeSocialEntities.Athletes", null)
                        .WithMany("RaceInvites")
                        .HasForeignKey("AthletesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeSocialEntities.Races", null)
                        .WithMany("RaceInvites")
                        .HasForeignKey("RacesId");
                });

            modelBuilder.Entity("BikeSocialEntities.RaceResults", b =>
                {
                    b.HasOne("BikeSocialEntities.Athletes", null)
                        .WithMany("RaceResults")
                        .HasForeignKey("AthletesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeSocialEntities.Races", null)
                        .WithMany("RaceResults")
                        .HasForeignKey("RacesId");
                });

            modelBuilder.Entity("BikeSocialEntities.Races", b =>
                {
                    b.HasOne("BikeSocialEntities.Federations", null)
                        .WithMany("Races")
                        .HasForeignKey("FederationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeSocialEntities.Places", null)
                        .WithMany("Races")
                        .HasForeignKey("PlacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeSocialEntities.RaceTypes", null)
                        .WithMany("Races")
                        .HasForeignKey("RaceTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BikeSocialEntities.RouteInvites", b =>
                {
                    b.HasOne("BikeSocialEntities.Routes", null)
                        .WithMany("RouteInvites")
                        .HasForeignKey("RoutesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeSocialEntities.Users", null)
                        .WithMany("RouteInvites")
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("BikeSocialEntities.Routes", b =>
                {
                    b.HasOne("BikeSocialEntities.Places", null)
                        .WithMany("Routes")
                        .HasForeignKey("PlacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeSocialEntities.RouteTypes", null)
                        .WithMany("Routes")
                        .HasForeignKey("RouteTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeSocialEntities.Users", null)
                        .WithMany("Routes")
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("BikeSocialEntities.TeamInviteAthletes", b =>
                {
                    b.HasOne("BikeSocialEntities.Athletes", null)
                        .WithMany("TeamInviteAthletes")
                        .HasForeignKey("AthletesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeSocialEntities.Teams", null)
                        .WithMany("TeamInviteAthletes")
                        .HasForeignKey("TeamsId");
                });

            modelBuilder.Entity("BikeSocialEntities.TeamInviteCoaches", b =>
                {
                    b.HasOne("BikeSocialEntities.Coaches", null)
                        .WithMany("TeamInviteCoaches")
                        .HasForeignKey("CoachesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeSocialEntities.Teams", null)
                        .WithMany("TeamInviteCoaches")
                        .HasForeignKey("TeamsId");
                });

            modelBuilder.Entity("BikeSocialEntities.Teams", b =>
                {
                    b.HasOne("BikeSocialEntities.Clubs", null)
                        .WithMany("Teams")
                        .HasForeignKey("ClubsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeSocialEntities.Federations", null)
                        .WithMany("Teams")
                        .HasForeignKey("FederationsId");

                    b.HasOne("BikeSocialEntities.Places", null)
                        .WithMany("Teams")
                        .HasForeignKey("PlacesId");
                });

            modelBuilder.Entity("BikeSocialEntities.TrainingInvites", b =>
                {
                    b.HasOne("BikeSocialEntities.Athletes", null)
                        .WithMany("TrainingInvites")
                        .HasForeignKey("AthletesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeSocialEntities.Trainings", null)
                        .WithMany("TrainingInvites")
                        .HasForeignKey("TrainingsId");
                });

            modelBuilder.Entity("BikeSocialEntities.Trainings", b =>
                {
                    b.HasOne("BikeSocialEntities.Places", null)
                        .WithMany("Trainings")
                        .HasForeignKey("PlacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeSocialEntities.Teams", null)
                        .WithMany("Trainings")
                        .HasForeignKey("TeamsId");

                    b.HasOne("BikeSocialEntities.TrainingTypes", null)
                        .WithMany("Trainings")
                        .HasForeignKey("TrainingTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BikeSocialEntities.Users", b =>
                {
                    b.HasOne("BikeSocialEntities.Places", null)
                        .WithMany("Users")
                        .HasForeignKey("PlacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeSocialEntities.UserTypes", null)
                        .WithMany("Users")
                        .HasForeignKey("UserTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BikeSocialEntities.AchievementTypes", b =>
                {
                    b.Navigation("Achievements");
                });

            modelBuilder.Entity("BikeSocialEntities.AthleteParents", b =>
                {
                    b.Navigation("Athletes");
                });

            modelBuilder.Entity("BikeSocialEntities.Athletes", b =>
                {
                    b.Navigation("RaceInvites");

                    b.Navigation("RaceResults");

                    b.Navigation("TeamInviteAthletes");

                    b.Navigation("TrainingInvites");
                });

            modelBuilder.Entity("BikeSocialEntities.AthleteTypes", b =>
                {
                    b.Navigation("Athletes");
                });

            modelBuilder.Entity("BikeSocialEntities.Clubs", b =>
                {
                    b.Navigation("Directors");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("BikeSocialEntities.Coaches", b =>
                {
                    b.Navigation("TeamInviteCoaches");
                });

            modelBuilder.Entity("BikeSocialEntities.DirectorTypes", b =>
                {
                    b.Navigation("Directors");
                });

            modelBuilder.Entity("BikeSocialEntities.Federations", b =>
                {
                    b.Navigation("Athletes");

                    b.Navigation("Races");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("BikeSocialEntities.Places", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("Clubs");

                    b.Navigation("Races");

                    b.Navigation("Routes");

                    b.Navigation("Teams");

                    b.Navigation("Trainings");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BikeSocialEntities.Prizes", b =>
                {
                    b.Navigation("Athletes");
                });

            modelBuilder.Entity("BikeSocialEntities.Races", b =>
                {
                    b.Navigation("RaceInvites");

                    b.Navigation("RaceResults");
                });

            modelBuilder.Entity("BikeSocialEntities.RaceTypes", b =>
                {
                    b.Navigation("Races");
                });

            modelBuilder.Entity("BikeSocialEntities.Routes", b =>
                {
                    b.Navigation("RouteInvites");
                });

            modelBuilder.Entity("BikeSocialEntities.RouteTypes", b =>
                {
                    b.Navigation("Routes");
                });

            modelBuilder.Entity("BikeSocialEntities.Teams", b =>
                {
                    b.Navigation("Athletes");

                    b.Navigation("Coaches");

                    b.Navigation("TeamInviteAthletes");

                    b.Navigation("TeamInviteCoaches");

                    b.Navigation("Trainings");
                });

            modelBuilder.Entity("BikeSocialEntities.Trainings", b =>
                {
                    b.Navigation("TrainingInvites");
                });

            modelBuilder.Entity("BikeSocialEntities.TrainingTypes", b =>
                {
                    b.Navigation("Trainings");
                });

            modelBuilder.Entity("BikeSocialEntities.Users", b =>
                {
                    b.Navigation("AthleteParents");

                    b.Navigation("Athletes");

                    b.Navigation("Coaches");

                    b.Navigation("Directors");

                    b.Navigation("Profiles");

                    b.Navigation("RouteInvites");

                    b.Navigation("Routes");

                    b.Navigation("recieptient");

                    b.Navigation("solicitor");
                });

            modelBuilder.Entity("BikeSocialEntities.UserTypes", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
