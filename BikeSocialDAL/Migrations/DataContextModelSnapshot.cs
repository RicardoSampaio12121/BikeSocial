// <auto-generated />
using System;
using BikeSocialDAL.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BikeSocialDAL.Migrations
{
    [DbContext(typeof(DataContext.DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BikeSocialEntities.Athlete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AthleteTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<int>("FederationId")
                        .HasColumnType("int");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("birthdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("contact")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("UserId");

                    b.ToTable("Athlete");
                });

            modelBuilder.Entity("BikeSocialEntities.Club", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("placeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("BikeSocialEntities.Coach", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<DateTime>("birthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("contact")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("BikeSocialEntities.ConAtletaEqui", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IdAthlete")
                        .HasColumnType("int");

                    b.Property<int>("IdEquipa")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ConAtletaEqui");
                });

            modelBuilder.Entity("BikeSocialEntities.ConCoachEqui", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IdCoach")
                        .HasColumnType("int");

                    b.Property<int>("IdEquipa")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ConCoachEqui");
                });

            modelBuilder.Entity("BikeSocialEntities.Equipa", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("clubId")
                        .HasColumnType("int");

                    b.Property<int>("coachId")
                        .HasColumnType("int");

                    b.Property<string>("local")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("clubId");

                    b.HasIndex("coachId")
                        .IsUnique();

                    b.ToTable("Equipa");
                });

            modelBuilder.Entity("BikeSocialEntities.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("recieptientId")
                        .HasColumnType("int");

                    b.Property<int>("solicitorId")
                        .HasColumnType("int");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("timeSent")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("recieptientId");

                    b.HasIndex("solicitorId");

                    b.ToTable("Friend");
                });

            modelBuilder.Entity("BikeSocialEntities.Place", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("BikeSocialEntities.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateBegining")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstimatedTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TrainingPlans");
                });

            modelBuilder.Entity("BikeSocialEntities.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<float>("EstimatedTime")
                        .HasColumnType("real");

                    b.Property<int>("FederationId")
                        .HasColumnType("int");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("RaceTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Race");
                });

            modelBuilder.Entity("BikeSocialEntities.Route", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("distance")
                        .HasColumnType("real");

                    b.Property<float>("estimatedTime")
                        .HasColumnType("real");

                    b.Property<int>("placeId")
                        .HasColumnType("int");

                    b.Property<int>("routeTypeId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("placeId");

                    b.HasIndex("routeTypeId");

                    b.HasIndex("userId");

                    b.ToTable("Route");
                });

            modelBuilder.Entity("BikeSocialEntities.RoutePeople", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("routeId")
                        .HasColumnType("int");

                    b.Property<int?>("userId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("routeId");

                    b.HasIndex("userId");

                    b.ToTable("RoutePeople");
                });

            modelBuilder.Entity("BikeSocialEntities.RoutePeopleInvited", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("routeId")
                        .HasColumnType("int");

                    b.Property<int?>("userId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("routeId");

                    b.HasIndex("userId");

                    b.ToTable("RoutePeopleInvited");
                });

            modelBuilder.Entity("BikeSocialEntities.RouteType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RouteTypes");
                });

            modelBuilder.Entity("BikeSocialEntities.Trainings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<float>("EstimatedTime")
                        .HasColumnType("real");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("PlanId");

                    b.HasIndex("TrainingTypeId");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("BikeSocialEntities.TrainingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TrainingTypes");
                });

            modelBuilder.Entity("BikeSocialEntities.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BikeSocialEntities.Athlete", b =>
                {
                    b.HasOne("BikeSocialEntities.Place", null)
                        .WithMany("Athletes")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeSocialEntities.User", null)
                        .WithMany("Athletes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BikeSocialEntities.Equipa", b =>
                {
                    b.HasOne("BikeSocialEntities.Club", null)
                        .WithMany("Equipas")
                        .HasForeignKey("clubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeSocialEntities.Coach", null)
                        .WithOne("team")
                        .HasForeignKey("BikeSocialEntities.Equipa", "coachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BikeSocialEntities.Friend", b =>
                {
                    b.HasOne("BikeSocialEntities.User", "recieptient")
                        .WithMany("recieptient")
                        .HasForeignKey("recieptientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeSocialEntities.User", "solicitor")
                        .WithMany("solicitor")
                        .HasForeignKey("solicitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("recieptient");

                    b.Navigation("solicitor");
                });

            modelBuilder.Entity("BikeSocialEntities.Race", b =>
                {
                    b.HasOne("BikeSocialEntities.Place", null)
                        .WithMany("Races")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BikeSocialEntities.Route", b =>
                {
                    b.HasOne("BikeSocialEntities.Place", null)
                        .WithMany("Routes")
                        .HasForeignKey("placeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeSocialEntities.RouteType", null)
                        .WithMany("Routes")
                        .HasForeignKey("routeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeSocialEntities.User", null)
                        .WithMany("Routes")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BikeSocialEntities.RoutePeople", b =>
                {
                    b.HasOne("BikeSocialEntities.Route", null)
                        .WithMany("People")
                        .HasForeignKey("routeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeSocialEntities.User", null)
                        .WithMany("RoutePeople")
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("BikeSocialEntities.RoutePeopleInvited", b =>
                {
                    b.HasOne("BikeSocialEntities.Route", null)
                        .WithMany("PeopleInvited")
                        .HasForeignKey("routeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeSocialEntities.User", null)
                        .WithMany("PeopleInvited")
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("BikeSocialEntities.Trainings", b =>
                {
                    b.HasOne("BikeSocialEntities.Place", null)
                        .WithMany("Trainings")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeSocialEntities.Plan", null)
                        .WithMany("Trainings")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeSocialEntities.TrainingType", null)
                        .WithMany("Trainings")
                        .HasForeignKey("TrainingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BikeSocialEntities.Club", b =>
                {
                    b.Navigation("Equipas");
                });

            modelBuilder.Entity("BikeSocialEntities.Coach", b =>
                {
                    b.Navigation("team")
                        .IsRequired();
                });

            modelBuilder.Entity("BikeSocialEntities.Place", b =>
                {
                    b.Navigation("Athletes");

                    b.Navigation("Races");

                    b.Navigation("Routes");

                    b.Navigation("Trainings");
                });

            modelBuilder.Entity("BikeSocialEntities.Plan", b =>
                {
                    b.Navigation("Trainings");
                });

            modelBuilder.Entity("BikeSocialEntities.Route", b =>
                {
                    b.Navigation("People");

                    b.Navigation("PeopleInvited");
                });

            modelBuilder.Entity("BikeSocialEntities.RouteType", b =>
                {
                    b.Navigation("Routes");
                });

            modelBuilder.Entity("BikeSocialEntities.TrainingType", b =>
                {
                    b.Navigation("Trainings");
                });

            modelBuilder.Entity("BikeSocialEntities.User", b =>
                {
                    b.Navigation("Athletes");

                    b.Navigation("PeopleInvited");

                    b.Navigation("RoutePeople");

                    b.Navigation("Routes");

                    b.Navigation("recieptient");

                    b.Navigation("solicitor");
                });
#pragma warning restore 612, 618
        }
    }
}
